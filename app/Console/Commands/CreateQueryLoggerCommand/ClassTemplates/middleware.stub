<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class {{ middlewareName }}
{
    /**
     * Handle an incoming request.
     *
     * @param Request $request
     * @param \Closure(Request): (Response) $next
     * @return Response
     */
    public function handle(Request $request, Closure $next): Response
    {
        $createLog = false;

        if (config('app.env') === config('app.query_logger_environment')) {
            $queryPerformance = '';
            $memoryBefore = memory_get_usage();

            // If no DB query executed for whatever reason the listen function will not be called
            DB::listen(function ($query) use (&$createLog, &$logData, &$executionTime) {
                $logData = (array) $query;
                $executionTime = $query->time;
                $createLog = true;
            });

            $response = $next($request);

            if (!$createLog) {
                return $response;
            }

            $memoryAfter = memory_get_usage();
            $memoryUsed = $memoryAfter - $memoryBefore;

            if ($memoryUsed < config('app.high_performance_query_memory') && floatval($executionTime) < config('app.high_performance_query_time')) {
                $queryPerformance = 'high_performing_query';
            } else if ($memoryUsed < config('app.mid_performance_query_memory') && floatval($executionTime) < config('app.mid_performance_query_time')) {
                $queryPerformance = 'mid_performing_query';
            } else if ($memoryUsed >= config('app.low_performance_query_memory') && floatval($executionTime) >= config('app.low_performance_query_time')) {
                $queryPerformance = 'low_performing_query';
            }

            $logData['request_memory'] = $this->formatUsedMemory($memoryUsed);
            $logData['query_performance'] = $queryPerformance;
            $logData = $this->formatLogData($logData);
            Log::stack([config('app.query_logger_channel')])->info(json_encode($logData));

            DB::flushQueryLog();
        } else {
            $response = $next($request);
        }

        return $response;
    }

    private function formatLogData(array $logData): array
    {
        $connection = $logData['connection'];

        return [
            'date' => date('Y-m-d H:i:s'),
            'query_performance' => $logData['query_performance'],
            'route_name' => request()->route()->getName(),
            'execution_time' => $logData['time'] . "ms",
            'request_memory' => $this->formatUsedMemory(memory_get_usage()),
            'connection_name' => $logData['connectionName'],
            'database_name' => $connection->getDatabaseName(),
            'driver' => $connection->getDriverName(),
            'host' => $connection->getConfig('host'),
            'parameters' => $logData['bindings'],
            'port' => $connection->getConfig('port'),
            'sql_query' => $logData['sql']
        ];
    }

    private function formatUsedMemory(int $usedMemory): string
    {
        $oneMegabyte = pow(1024, 2);

        return ($usedMemory >= $oneMegabyte)
            ? round($usedMemory / $oneMegabyte, 2) . "MB"
            : round($usedMemory / 1024, 2) . " KB";
    }
}

