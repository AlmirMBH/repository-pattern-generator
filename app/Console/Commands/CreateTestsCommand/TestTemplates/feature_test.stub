<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use App\Models\{{ modelName }};

class {{ modelName }}ApiTest extends TestCase
{
    use DatabaseMigrations;


    public function testCreate{{ modelName }}(): void
    {
        $requestData = {{ createRequestData }};

        $expectedCreateResponseData = {{ expectedCreateResponseData }};

        $response = $this->postJson(
                uri: route(
                    name: 'create{{ modelName }}'
                ),
                data: $requestData
            );

        $response->assertStatus(201);
        $response->assertJson($expectedCreateResponseData);
        $this->assertDatabaseHas('{{ databaseName }}', $expectedCreateResponseData);
    }

    public function testGet{{ modelNamePlural }}(): void
    {
        {{ modelName }}::factory()
            ->count(2)
            ->sequence(...{{ modelSequence }})->createQuietly();

        $expectedResponseData = {{ expectedModelSequenceResponseData }};

        $response = $this->getJson(
                uri: route(
                    name: 'get{{ modelNamePlural }}'
                )
            );

        $response->assertStatus(200);
        $response->assertJson($expectedResponseData);

        foreach ($expectedResponseData as $dBRecord) {
                    $this->assertDatabaseHas('{{ databaseName }}', $dBRecord);
                }
    }

    public function testGet{{ modelNamePlural }}NoDataFound(): void
        {
            $response = $this->getJson(
                    uri: route(
                        name: 'get{{ modelNamePlural }}'
                    )
                );

            $response->assertStatus(200);
        }

    public function testGet{{ modelName }}(): void
    {
        ${{ modelVariableName }} = {{ modelName }}::factory()->createQuietly({{ createRequestData }});

        $expectedCreateResponseData = {{ expectedCreateResponseData }};

        $response = $this->getJson(
                uri: route(
                    name: 'get{{ modelName }}',
                    parameters: ['{{ modelVariableName }}Id' => ${{ modelVariableName }}->id]
                )
            );

        $response->assertStatus(200);
        $response->assertJson($expectedCreateResponseData);
        $this->assertDatabaseHas('{{ databaseName }}', $expectedCreateResponseData);
    }

    public function testGet{{ modelName }}NoDataFound(): void
        {
            $response = $this->getJson(
                    uri: route(
                        name: 'get{{ modelName }}',
                        parameters: ['{{ modelVariableName }}Id' => 1]
                    )
                );

            $response->assertStatus(404);
        }

    public function testUpdate{{ modelName }}(): void
    {
        ${{ modelVariableName }} = {{ modelName }}::factory()->createQuietly({{ createRequestData }});

        $updateRequestData = {{ updateRequestData }};

        $expectedUpdateResponseData = {{ expectedUpdateResponseData }};

        $response = $this->putJson(
                uri: route(
                    name: 'update{{ modelName }}',
                    parameters: ['{{ modelVariableName }}Id' => ${{ modelVariableName }}->id]
                ),
                data: $updateRequestData
            );

        $response->assertStatus(200);
        $response->assertJson($expectedUpdateResponseData);
        $this->assertDatabaseHas('{{ databaseName }}', $expectedUpdateResponseData);
    }

    public function testUpdate{{ modelName }}NoDataFound(): void
        {
            $updateRequestData = {{ updateRequestData }};

            $response = $this->putJson(
                    uri: route(
                        name: 'update{{ modelName }}',
                        parameters: ['{{ modelVariableName }}Id' => 1]
                    ),
                    data: $updateRequestData
                );

            $response->assertStatus(404);
        }

    public function testDelete{{ modelName }}(): void
    {
        ${{ modelVariableName }} = {{ modelName }}::factory()->createQuietly({{ createRequestData }});

        $response = $this->deleteJson(
                uri: route(
                    name: 'delete{{ modelName }}',
                    parameters: ['{{ modelVariableName }}Id' => ${{ modelVariableName }}->id]
                )
            );

        $response->assertStatus(200);
        $this->assertDatabaseMissing('{{ databaseName }}', {{ expectedCreateResponseData }});
    }

    public function testDelete{{ modelName }}NoDataFound(): void
        {
            $response = $this->deleteJson(
                    uri: route(
                        name: 'delete{{ modelName }}',
                        parameters: ['{{ modelVariableName }}Id' => 1]
                    )
                );

            $response->assertStatus(404);
        }
}
